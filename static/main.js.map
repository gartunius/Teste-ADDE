{"version":3,"sources":["./src/environments/environment.ts","./src/app/climate.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/climate/climate.component.html","./src/app/climate/climate.component.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ClimateService {\n\n    constructor(private http: HttpClient) { }\n\n    // locationIdentifier has to be either the name of the city or it's coordenates.\n    getWeatherInfo(locationIdentifier: string, checkType:string, values:string[], days:string) {\n        let parameters = new HttpParams();\n\n        parameters = parameters.set('locationID', locationIdentifier);\n        if ( locationIdentifier == \"coords\" ) {\n            parameters = parameters.set('latitude', values[0]);\n            parameters = parameters.set('longitude', values[1]);\n\n        } else if ( locationIdentifier == \"location\" ){\n            parameters = parameters.set('location', values[0]);\n        }\n\n        if (checkType == \"forecast\") {\n            parameters = parameters.set('type', 'forecast');\n            parameters = parameters.set('days', days);\n        } else {\n            parameters = parameters.set('type', 'current');\n        }\n\n        return this.http.get(`http://localhost:5000/WeatherCheck`, { params: parameters });\n    }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n","<app-climate></app-climate>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { ClimateComponent } from './climate/climate.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ClimateComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"climate\">\n    <h1 class=\"container\">Weather Check</h1>\n    <h2 class=\"container\">{{ currentLocation }} today</h2>\n\n    <div class=\"container\">\n        <img class=\"weather_icon\" src=\"https://www.weatherbit.io/static/img/icons/{{currentIcon}}.png\" alt=\"\">\n    </div>\n\n    <table>\n        <tr>\n            <th class=\"property\">Temperature: </th>\n            <td class=\"property_value\">{{ currentTemp }} °C</td>\n        </tr>\n        <tr>\n            <th class=\"property\">Apparent Temperature: </th>\n            <td class=\"property_value\">{{ currentAppTem }} °C</td>\n        </tr>\n        <tr>\n            <th class=\"property\">Precipitation Rate: </th>\n            <td class=\"property_value\">{{ currentPrecip }} mm/hr</td>\n        </tr>\n        <tr>\n            <th class=\"property\">Snowfall: </th>\n            <td class=\"property_value\">{{ currentSnow }} mm/hr</td>\n        </tr>\n        <tr>\n            <th class=\"property\">Weather: </th>\n            <td class=\"property_value\">{{ currentWeatherDescription }}</td>\n        </tr>\n    </table>\n\n    <input id=\"location\" [(ngModel)]=\"currentLocation\" type=\"text\">\n\n    <div class=\"container\">\n        <button class=\"send_location\" (click)=\"checkWeather('location', null, null)\">Send location</button>\n    </div>\n        <table *ngFor=\"let day of days\">\n            <tr>\n                <th class=\"property\">Day: </th>\n                <td class=\"property_value\">{{ day.date }}</td>\n            </tr>\n            <tr>\n                <th class=\"property\">Temperature: </th>\n                <td class=\"property_value\">{{ day.temperature }} °C</td>\n            </tr>\n            <tr>\n                <th class=\"property\">Weather: </th>\n                <td class=\"property_value\">{{ day.weather }}</td>\n            </tr>\n        </table>\n    <div>\n    </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ClimateService } from '../climate.service';\nimport { WeatherDay } from '../weather-day';\n\n@Component({\n    selector: 'app-climate',\n    templateUrl: './climate.component.html',\n    styleUrls: ['./climate.component.css']\n})\nexport class ClimateComponent implements OnInit {\n    currentLocation: string = 'campinas';\n    currentTemp: string;\n    currentAppTem: string;\n    currentPrecip: string;\n    currentSnow: string;\n    currentWeatherDescription: string;\n    currentIcon: string;\n\n    days: WeatherDay[];\n    amountOfDays: \"3\";\n\n    constructor(private climateService: ClimateService) { }\n\n    ngOnInit(): void {\n        navigator.geolocation.getCurrentPosition((position) => {\n            var latitude = String(position.coords.latitude);\n            var longitude = String(position.coords.longitude);\n\n            this.checkWeather('coords', latitude, longitude);\n        })\n    }\n\n    /*\n    * checkType = 'location' or 'coords'\n    * latitude = string formated value\n    * longitude = string formated value\n    * */\n    checkWeather(checkType:string, latitude:string, longitude:string): void {\n        var values = [];\n\n        if ( checkType == \"location\" ) {\n            values = [ this.currentLocation ];\n\n        } else if ( checkType == \"coords\" ) {\n            values = [ latitude, longitude ];\n\n        }\n\n        this.climateService.getWeatherInfo(checkType, \"current\", values, null).toPromise().then(data => {\n            var jsonContent = data['data'][0];\n\n            this.currentLocation           = jsonContent['city_name'];\n            this.currentTemp               = jsonContent['temp'];\n            this.currentAppTem             = jsonContent['app_temp'];\n            this.currentPrecip             = jsonContent['precip'];\n            this.currentSnow               = jsonContent['snow'];\n            this.currentWeatherDescription = jsonContent['weather']['description'];\n            this.currentIcon               = jsonContent['weather']['icon'];\n        });\n\n        this.climateService.getWeatherInfo(checkType, \"forecast\", values, this.amountOfDays).toPromise().then(data => {\n            var days: WeatherDay[] = [];\n\n            for (let key in data['data']) {\n                var datetime    = data['data'][key]['datetime'];\n                var temperature = data['data'][key]['temp'];\n                var weather     = data['data'][key]['weather']['description'];\n\n                days.push(<WeatherDay> {\n                    temperature: temperature,\n                    weather: weather,\n                    date: datetime,\n                })\n            }\n\n            this.days = days;\n        })\n        \n    }\n\n}\n\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}