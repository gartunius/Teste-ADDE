{"version":3,"sources":["./src/environments/environment.ts","./src/app/climate.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/climate/climate.component.ts","./src/app/climate/climate.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClimateService {\n\n  constructor(private http: HttpClient) { }\n\n  getWeatherInfo(location: string) {\n    let parameters = new HttpParams();\n    parameters = parameters.set('location', location);\n\n    return this.http.get(`http://localhost:5000/weather`, { params: parameters });\n  }\n\n  getWeatherInfoWithLatLon(latitude: string, longitude: string) {\n    let parameters = new HttpParams();\n    parameters = parameters.set('lat', latitude);\n    parameters = parameters.set('lon', longitude);\n\n    return this.http.get(`http://localhost:5000/weather`, { params: parameters });\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n","<app-climate></app-climate>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { ClimateComponent } from './climate/climate.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ClimateComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ClimateService } from '../climate.service';\n\n@Component({\n    selector: 'app-climate',\n    templateUrl: './climate.component.html',\n    styleUrls: ['./climate.component.css']\n})\nexport class ClimateComponent implements OnInit {\n    private iconUrl = \"https://www.weatherbit.io/static/img/icons/\";\n\n    currentLocation: string = 'campinas';\n    currentTemp: string;\n    currentAppTem: string;\n    currentPrecip: string;\n    currentSnow: string;\n    currentWeatherDescription: string;\n    currentIcon: string;\n    weatherData: string[];\n\n    constructor(private climateService: ClimateService) { }\n\n    ngOnInit(): void {\n        navigator.geolocation.getCurrentPosition((position) => {\n            var latitude = String(position.coords.latitude);\n            var longitude = String(position.coords.longitude);\n\n            this.climateService.getWeatherInfoWithLatLon(latitude, longitude).toPromise().then(data => {\n                var jsonContent = data['data'][0];\n\n                this.currentLocation = String(jsonContent['city_name'])\n                this.currentTemp = String(jsonContent['temp'])\n                this.currentAppTem = String(jsonContent['app_temp'])\n                this.currentPrecip = String(jsonContent['precip'])\n                this.currentSnow = String(jsonContent['snow'])\n                this.currentWeatherDescription = String(jsonContent['weather']['description'])\n                this.currentIcon = String(jsonContent['weather']['icon'])\n            });\n        })\n    }\n\n    checkWeather(): void {\n        this.climateService.getWeatherInfo(this.currentLocation).toPromise().then(data => {\n            var jsonContent = data['data'][0];\n\n            this.setData(jsonContent);\n            // this.currentLocation = String(jsonContent['city_name'])\n            // this.currentTemp = String(jsonContent['temp'])\n            // this.currentAppTem = String(jsonContent['app_temp'])\n            // this.currentPrecip = String(jsonContent['precip'])\n            // this.currentSnow = String(jsonContent['snow'])\n            // this.currentWeatherDescription = String(jsonContent['weather']['description'])\n            // this.currentIcon = String(jsonContent['weather']['icon'])\n        });\n    }\n\n    private setData(jsonContent): void {\n        this.currentLocation = String(jsonContent['city_name'])\n        this.currentTemp = String(jsonContent['temp'])\n        this.currentAppTem = String(jsonContent['app_temp'])\n        this.currentPrecip = String(jsonContent['precip'])\n        this.currentSnow = String(jsonContent['snow'])\n        this.currentWeatherDescription = String(jsonContent['weather']['description'])\n        this.currentIcon = String(jsonContent['weather']['icon'])\n\n    }\n\n}\n","<div class=\"climate\">\n    <h1 class=\"container\">Weather Check</h1>\n    <h2 class=\"container\">{{ currentLocation }}</h2>\n\n    <div class=\"container\">\n        <img class=\"weather_icon\" src=\"https://www.weatherbit.io/static/img/icons/{{currentIcon}}.png\" alt=\"\">\n    </div>\n    <h2 class=\"property\">Temperature: {{ currentTemp }} °C</h2>\n    <h2 class=\"property\">Apparent Temperature: {{ currentAppTem }} °C</h2>\n    <h2 class=\"property\">Precipitation Rate: {{ currentPrecip }} mm/hr</h2>\n    <h2 class=\"property\">Snowfall: {{ currentSnow }} mm/hr</h2>\n    <h2 class=\"property\">Weather: {{ currentWeatherDescription }}</h2>\n\n    <input id=\"location\" [(ngModel)]=\"currentLocation\" type=\"text\">\n\n    <div class=\"container\">\n        <button class=\"send_location\" (click)=\"checkWeather()\">Send location</button>\n    </div>\n</div>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}